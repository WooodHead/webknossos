# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Level Creator

GET           /                                                controllers.levelcreator.LevelCreator.list
POST          /levels                                          controllers.levelcreator.LevelCreator.create

GET           /levels/:levelName/stacks                        controllers.levelcreator.StackController.list(levelName: String)

GET           /levels/:levelId                                 controllers.levelcreator.LevelCreator.useRandom(levelId: String)
GET           /levels/:levelId/missions/:missionId             controllers.levelcreator.LevelCreator.use(levelId: String, missionId: String)
PUT           /levels/:levelId                                 controllers.levelcreator.LevelCreator.submitCode(levelId: String)
DELETE        /levels/:levelId                                 controllers.levelcreator.LevelCreator.delete(levelId: String)
GET           /levels/:levelId/progress                        controllers.levelcreator.LevelCreator.progress(levelId: String)

GET           /levels/:levelId/produce                         controllers.levelcreator.StackController.produce(levelId: String, count: Int ?= 1)
#POST          /levels/:levelId/produce                         controllers.levelcreator.StackController.produceBulk(levelId: String)
#GET           /levels/:levelId/produce/all                     controllers.levelcreator.StackController.produceAll(levelId: String)

GET           /levels/:levelId/stacks.json                     controllers.levelcreator.StackController.listJson(levelId: String)
DELETE        /levels/:levelId/stacks                          controllers.levelcreator.StackController.deleteAll(levelId: String)
DELETE        /levels/:levelId/stacks/:missionId               controllers.levelcreator.StackController.delete(levelId: String, missionId: String)

GET           /levels/:levelId/assets                          controllers.levelcreator.LevelCreator.listAssets(levelId: String)
POST          /levels/:levelId/assets                          controllers.levelcreator.LevelCreator.uploadAsset(levelId: String)
GET           /levels/:levelId/assets/*asset                   controllers.levelcreator.LevelCreator.retrieveAsset(levelId: String, asset: String)
DELETE        /levels/:levelId/assets/*asset                   controllers.levelcreator.LevelCreator.deleteAsset(levelId: String, asset: String)

POST          /levels/:levelId/renderSettings                  controllers.levelcreator.LevelCreator.updateRenderSettings(levelId: String)

# worker urls
GET           /renderer/requestWork                            controllers.levelcreator.WorkController.request(rendererId: String)
POST          /renderer/finishedWork                           controllers.levelcreator.WorkController.finished(key: String)
GET           /renderer/failedWork                             controllers.levelcreator.WorkController.failed(key: String, reason: String)

#Getting binary Data
GET           /datasets/:dataSetName/layers/:layer/data        controllers.levelcreator.BinaryData.viaAjax(dataSetName: String, levelId: String, missionId: String, layer: String)
GET           /datasets/:dataSetName/batches/:batchId/solutions  controllers.levelcreator.SolutionApi.solutions(batchId: Int, dataSetName: String)

#Mission Data
#GET           /missions                                        controllers.levelcreator.MissionController.getMissions(dataSetName: String)
GET           /missions/random                                 controllers.levelcreator.MissionController.getRandomMission(dataSetName: String)
GET           /missions/:missionId                             controllers.levelcreator.MissionController.getMission(missionId: String)
GET           /missions                                        controllers.levelcreator.MissionController.list

# Javascript routing
GET           /assets/javascripts/routes.js                    controllers.levelcreator.Application.javascriptRoutes

GET           /assets/level/*file                              controllers.levelcreator.Assets.at(path="/modules/levelcreator/public", file)
# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                    controllers.Assets.at(path="/public", file)

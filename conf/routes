# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# The general pages
GET           /                                                          controllers.Application.index
GET           /dashboard                                                 controllers.UserController.empty
GET           /impressum                                                 controllers.Application.impressum

# Tasks

# Jira integration
GET           /issues                                                    controllers.GithubIssues.index
POST          /issues                                                    controllers.GithubIssues.submit

# Authentication
GET           /login                                                     controllers.Authentication.login
POST          /login                                                     controllers.Authentication.authenticate
GET           /logout                                                    controllers.Authentication.logout
GET           /register                                                  controllers.Authentication.register
POST          /register                                                  controllers.Authentication.handleRegistration

# User settings
GET           /users                                                     controllers.UserController.empty
POST          /user/configuration                                        controllers.SettingsController.update
GET           /user/configuration                                        controllers.SettingsController.read
GET           /user/configuration/default                                controllers.SettingsController.default
GET           /user/tasks/request                                        controllers.TaskController.request
GET           /users/:id/details                                         controllers.UserController.emptyWithWildcard(id)

GET           /api/users                                                 controllers.UserController.list
GET           /api/user                                                  controllers.UserController.current
GET           /api/user/details                                          controllers.UserController.details
DELETE        /api/users/:id                                             controllers.UserController.delete(id: String)
PUT           /api/users/:id                                             controllers.UserController.update(id: String)
GET           /api/users/:id/details                                     controllers.UserController.userDetails(id: String)
GET           /api/users/:id/annotations/download                        controllers.admin.NMLIO.userDownload(id: String)
# GET         /api/users/:id/loginAs                                     controllers.UserController.loginAsUser(id: String)


# Team
GET           /teams                                                     controllers.TeamController.empty
GET           /api/teams                                                 controllers.TeamController.list
POST          /api/teams                                                 controllers.TeamController.create
DELETE        /api/teams/:id                                             controllers.TeamController.delete(id: String)

# Binary Data

# Spotlight
GET           /spotlight                                                 controllers.DataSetController.spotlight

# DataSets
GET           /datasets                                                  controllers.DataSetController.empty
GET           /datasets/import                                           controllers.DataSetController.importAll
GET           /datasets/:dataSetName/view                                controllers.DataSetController.view(dataSetName: String)
GET           /api/datasets                                              controllers.DataSetController.list
GET           /api/datasets/:dataSetName                                 controllers.DataSetController.read(dataSetName: String)
POST          /api/datasets/:dataSetName/teams                           controllers.DataSetController.updateTeams(dataSetName: String)
POST          /api/datasets/:dataSetName/import                          controllers.DataSetController.importDataSet(dataSetName: String)
GET           /api/datasets/:dataSetName/import                          controllers.DataSetController.importProgress(dataSetName: String)

# GET         /datasets/:dataSetName/layers/:dataLayerName/ws_data        controllers.BinaryData.requestViaWebsocket(dataSetName: String, dataLayerName: String, cubeSize: Int)
POST          /datasets/:dataSetName/layers/:dataLayerName/data          controllers.BinaryData.requestViaAjax(dataSetName: String, dataLayerName: String, cubeSize: Int)
GET           /datasets/:dataSetName/layers/:dataLayerName/data          controllers.BinaryData.requestViaAjaxDebug(dataSetName: String, dataLayerName: String, cubeSize: Int, x: Int, y: Int, z: Int, resolution: Int)
GET           /datasets/:dataSetName/layers/:dataLayerName/sprite        controllers.BinaryData.requestSpriteSheet(dataSetName: String, dataLayerName: String, cubeSize: Int ?=128, imagesPerRow: Int ?= 8, x: Int, y: Int, z: Int, resolution: Int)
GET           /datasets/:dataSetName/layers/:dataLayerName/image         controllers.BinaryData.requestImage(dataSetName: String, dataLayerName: String, width: Int, height: Int, x: Int, y: Int, z: Int, resolution: Int)

PUT           /datasets/:dataSetName/layers/:dataLayerName/data          controllers.BinaryData.writeViaAjax(dataSetName: String, dataLayerName: String, cubeSize: Int)

# SkeletonTracing Stuff
POST          /annotations/createExplorational                           controllers.AnnotationController.createExplorational
PUT           /annotations/:typ/:id                                      controllers.AnnotationController.updateWithJson(typ: String, id: String, version: Int)
POST          /annotations/:typ/:id/name                                 controllers.AnnotationController.nameExplorativeAnnotation(typ: String, id: String)
GET           /annotations/:typ/:id/finish                               controllers.AnnotationController.finish(typ: String, id: String)
GET           /annotations/:typ/:id/reopen                               controllers.AnnotationController.reopen(typ: String, id: String)
GET           /annotations/:typ/:id/reset                                controllers.AnnotationController.reset(typ: String, id: String)

GET           /annotations/:typ/:id                                      controllers.AnnotationController.trace(typ: String, id: String)
GET           /annotations/:typ/:id/data                                 controllers.AnnotationController.traceJSON(typ: String, id: String)
GET           /annotations/:typ/:id/info                                 controllers.AnnotationController.info(typ: String, id: String)
GET           /annotations/:typ/:id/download                             controllers.AnnotationController.download(typ: String, id: String)
DELETE        /annotations/:typ/:id                                      controllers.AnnotationController.cancel(typ: String, id: String)

#Admin pages
GET           /admin/nml/upload                                          controllers.admin.NMLIO.uploadForm
POST          /admin/nml/upload                                          controllers.admin.NMLIO.upload

# Admin Tasks
# TODO: those routes need to be renamed!
# --->
GET           /admin/tasks/algorithm                                     controllers.admin.TaskAlgorithm.index
POST          /admin/tasks/algorithm                                     controllers.admin.TaskAlgorithm.submitAlgorithm
GET           /admin/tasks/algorithm/:id?use=true                        controllers.admin.TaskAlgorithm.useAlgorithm(id: String)
# <---

GET           /api/tasks                                                 controllers.TaskController.list
DELETE        /api/tasks/:id                                             controllers.admin.TaskAdministration.delete(id: String)

GET           /tasks                                                     controllers.TaskController.empty
GET           /admin/tasks/create                                        controllers.admin.TaskAdministration.create
POST          /admin/tasks/createBulk                                    controllers.admin.TaskAdministration.createBulk
POST          /admin/tasks/createFromNML                                 controllers.admin.TaskAdministration.createFromNML
POST          /admin/tasks/createFromForm                                controllers.admin.TaskAdministration.createFromForm
GET           /admin/tasks/overview                                      controllers.admin.TaskAdministration.overview
GET           /admin/tasks/overview/data                                 controllers.admin.TaskAdministration.overviewData
GET           /admin/tasks/:id/edit                                      controllers.admin.TaskAdministration.edit(id: String)
POST          /admin/tasks/:id                                           controllers.admin.TaskAdministration.editTaskForm(id: String)
GET           /api/tasks/:id/download                                    controllers.admin.NMLIO.taskDownload(id: String)
GET           /api/tasks/:id/annotations                                 controllers.AnnotationController.annotationsForTask(id: String)

GET           /admin/taskTypes                                           controllers.admin.TaskTypeAdministration.list
POST          /admin/taskTypes                                           controllers.admin.TaskTypeAdministration.create
GET           /admin/taskTypes/:id/delete                                controllers.admin.TaskTypeAdministration.delete(id: String)
GET           /admin/taskTypes/:id/edit                                  controllers.admin.TaskTypeAdministration.edit(id: String)
GET           /admin/taskTypes/:id/tasks                                 controllers.admin.TaskAdministration.tasksForType(id: String)
POST          /admin/taskTypes/:id                                       controllers.admin.TaskTypeAdministration.editTaskTypeForm(id: String)

# Projects
GET           /projects                                                  controllers.ProjectController.empty
GET           /api/projects                                              controllers.ProjectController.list
POST          /api/projects                                              controllers.ProjectController.create
DELETE        /api/projects/:name                                        controllers.ProjectController.delete(name: String)
GET           /api/projects/:name/download                               controllers.admin.NMLIO.projectDownload(name: String)
GET           /api/projects/:name/tasks                                  controllers.ProjectController.tasksForProject(name: String)

GET           /statistics                                                controllers.StatisticsController.empty
GET           /api/statistics/oxalis                                     controllers.StatisticsController.oxalis(interval: String, start: Option[Long], end: Option[Long])
GET           /api/statistics/users                                      controllers.StatisticsController.users(interval: String, start: Option[Long], end: Option[Long], limit: Int)
# Javascript routing
GET           /assets/javascripts/routes.js                              controllers.Application.javascriptRoutes

# Map static resources from the /public folder to the /public path
GET           /assets/*file                                              controllers.Assets.at(path="/public", file)

{ "_id" : { "$oid" : "570a24dbfe96142542aa7fca" }, "revision" : 1, "hash" : "03437c1af301e1585bce5210f8812a975a7fc0e8", "applied_at" : 1460282587381, "db_up" : "db.timeTracking.find().forEach(function (tt) {\ntt.timeEntries.forEach(function(te){\nvar ts = {\n\"time\" : te.time,\n\"timestamp\" : te.timestamp,\n\"lastUpdate\" : te.timestamp,\n\"_user\" : tt.user\n}\n\nif(te.annotation)\nts.annotation = te.annotation\n\ndb.timeSpans.insert(ts)\n})\n})", "db_down" : "db.timeSpans.drop()", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24dc3fdf98682d73b81d" }, "revision" : 5, "hash" : "d9505e73b2b0767388aa8929b1aec89ac69a2167", "applied_at" : 1460282588828, "db_up" : "db.dataSets.update({}, {\"$set\" : {\"dataStoreInfo\" : {\"name\" : \"localhost\", \"url\" : \"http://localhost:9000\"}}}, {\"multi\" : true})", "db_down" : "", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24dccd1cbcc8bcd424a5" }, "revision" : 2, "hash" : "af3cbfe1d5b069935453b2ee56df630a05f41c45", "applied_at" : 1460282587961, "db_up" : "db.userDataLayers.find().forEach(function (dl) {\ndl.dataLayer.name = dl.name;\ndl.dataLayer.category = dl.dataLayer.typ;\ndl.dataLayer.fallback = {\n\"layerName\" : dl.dataLayer.typ,\n\"dataSourceName\" : dl.dataLayer.fallback\n}\ndb.userDataLayers.save(dl);\n})\n\ndb.dataSets.update({}, {\"$unset\" : {\"dataSource\" : \"\"}}, {\"multi\" : true})", "db_down" : "db.dataSets.update({}, {\"$unset\" : {\"dataSource\" : \"\"}}, {\"multi\" : true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24dce854f958a435a74a" }, "revision" : 4, "hash" : "a2f22c617837d630adf1fca848506f4f66eac54a", "applied_at" : 1460282588549, "db_up" : "db.dataSets.update({}, {\"$unset\" : {\"dataSource\" : \"\"}}, {\"multi\" : true})", "db_down" : "db.dataSets.update({}, {\"$unset\" : {\"dataSource\" : \"\"}}, {\"multi\" : true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24dcf9682e23085e6b68" }, "revision" : 3, "hash" : "3e3c8832b1739c45aab83434fae7ee766b7ab972", "applied_at" : 1460282588263, "db_up" : "db.userDataLayers.update({}, {\"$set\" : {\"dataLayer.isWritable\" : true}}, {\"multi\" : true})", "db_down" : "db.userDataLayers.update({}, {\"$unset\" : {\"dataLayer.isWritable\" : \"\"}}, {\"multi\" : true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24dd3c5b1462da0d8e55" }, "revision" : 7, "hash" : "053b62509fe3cf647d06a9301f30a925250a2e6d", "applied_at" : 1460282589340, "db_up" : "db.users.update({}, {$unset: {\"configuration.settings.zoom\": 0.0}}, {multi: true})\ndb.volumes.update({}, {$set: {\"zoomLevel\": 0.0}}, {multi: true})\ndb.skeletons.update({}, {$set: {\"zoomLevel\": 0.0}}, {multi: true})", "db_down" : "db.users.update({}, {$set: {\"configuration.settings.zoom\": 0.0}}, {multi: true})\ndb.volumes.update({}, {$unset: {\"zoomLevel\": 0.0}}, {multi: true})\ndb.skeletons.update({}, {$unset: {\"zoomLevel\": 0.0}}, {multi: true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24dd4703c120f2e1f245" }, "revision" : 6, "hash" : "1ca74a03ce0806c1380e70c504f4c852398722ce", "applied_at" : 1460282589085, "db_up" : "db.annotations.find().forEach(function (annotation) {\nvar content = annotation._content;\nvar contentFetched;\n\nvar cursor;\n\nif (content.contentType == \"skeletonTracing\") {\ncursor = db.skeletons.find({\"_id\" : ObjectId(content._id)});\n} else {\ncursor = db.volumes.find({\"_id\" : ObjectId(content._id)});\n}\n\ncontentFetched = cursor.hasNext() && cursor.next();\n\nif (contentFetched)\ndb.annotations.update({\"_id\" : annotation._id}, {\"$set\" : {\"created\" : contentFetched.timestamp }});\n})", "db_down" : "db.annotations.update({}, {\"$unset\" : {\"created\" : \"\"}}, {\"multi\" : true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24dd9114a94c8c25a6ce" }, "revision" : 9, "hash" : "e5290606da49fef00f8753c37031fc7a8a20c330", "applied_at" : 1460282589894, "db_up" : "db.annotations.find({\"_name\" : {\"$exists\" : true}}).forEach(function (annotation) {\nvar name = annotation._name.replace(\".nml\", \"\");\n\ndb.annotations.update({\"_id\" : annotation._id}, {\"$set\" : {\"_name\" : name }});\n})", "db_down" : "", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24ddb035a22e5ea332d9" }, "revision" : 8, "hash" : "7e22e3ca460e8a14bee0085b7d21a55ef0d80d0b", "applied_at" : 1460282589610, "db_up" : "// should NOT be applied on master\ndb.teams.update({\"name\" : {\"$ne\" : \"Structure of Neocortical Circuits Group\"}}, {\"$set\" : {\"parent\" : \"Structure of Neocortical Circuits Group\"}}, {\"multi\" : true})", "db_down" : "", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24de34dfc2ac901e7320" }, "revision" : 12, "hash" : "9a32ec986e9978cb8242340c7efd5666bf569747", "applied_at" : 1460282590695, "db_up" : "db.users.find().forEach(function(elem){\nsettings = elem.configuration.settings.brightnessContrastSettings;\nfor(dataset in settings) {\nif(dataset != \"default\") {\nsettings[dataset] = {color: settings[dataset]};\n}\n}\nelem.configuration.settings.brightnessContrastColorSettings = elem.configuration.settings.brightnessContrastSettings;\ndelete elem.configuration.settings.brightnessContrastSettings;\ndb.users.save(elem);\n})", "db_down" : "db.users.find().forEach(function(elem){\nsettings = elem.configuration.settings.brightnessContrastColorSettings;\nfor(dataset in settings) {\nif(dataset != \"default\") {\nkeys = [];\nfor(key in settings[dataset]) {\nkeys.push(key);\n}\nsettings[dataset] = settings[dataset][keys[0]];\n}\n}\nelem.configuration.settings.brightnessContrastSettings = elem.configuration.settings.brightnessContrastColorSettings;\ndelete elem.configuration.settings.brightnessContrastColorSettings;\ndb.users.save(elem);\n})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24deda8afaf095e25978" }, "revision" : 10, "hash" : "993e8af09c094689f748c5e203d7ae2c8b948252", "applied_at" : 1460282590149, "db_up" : "db.dataSets.update({}, {\"$unset\" : {\"dataSource\" : \"\"}}, {\"multi\" : true})\ndb.userDataLayers.update({}, {\"$set\": {\"dataLayer.mappings\": []}}, {\"multi\" : true})", "db_down" : "db.dataSets.update({}, {\"$unset\" : {\"dataSource\" : \"\"}}, {\"multi\" : true})\ndb.userDataLayers.update({}, {\"$unset\": {\"dataLayer.mappings\": \"\"}}, {\"multi\" : true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24def10bfaaa81c15031" }, "revision" : 11, "hash" : "8e587d4dcaa16891a0e3a202442f59f5a3f1ef19", "applied_at" : 1460282590422, "db_up" : "db.users.update({}, {\"$set\" : {\"md5hash\" : \"\"}}, {\"multi\" : true})", "db_down" : "db.users.update({}, {\"$unset\" : {\"md5hash\" : \"\"}}, {\"multi\" : true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24df1ab054ebd9d7db72" }, "revision" : 16, "hash" : "17d4d0c8f47ff176033fba209fbd75ff4f7d071a", "applied_at" : 1460282591793, "db_up" : "db.nodes.update({}, {\"$set\" : {\"node.rotation\" : [0.0, 0.0, 0.0]}}, {\"multi\" : true})", "db_down" : "db.nodes.update({}, {\"$unset\" : {\"node.rotation\" : \"\"}}, {\"multi\" : true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24dfbb89afe57c7df36a" }, "revision" : 13, "hash" : "6fe116acf91933bcc6563e717a3b310f9d3dbf74", "applied_at" : 1460282590976, "db_up" : "db.skeletons.find().forEach(function(elem){\nmodes = elem.settings.allowedModes;\nif(~modes.indexOf(\"arbitrary\"))\nelem.settings.allowedModes = [\"oblique\", \"flight\"];\nelse\nelem.settings.allowedModes = [];\ndb.skeletons.save(elem);\n})", "db_down" : "db.skeletons.find().forEach(function(elem){\nmodes = elem.settings.allowedModes;\nif((~modes.indexOf(\"oblique\")) || (~modes.indexOf(\"flight\")))\nelem.settings.allowedModes = [\"oxalis\", \"arbitrary\"];\nelse\nelem.settings.allowedModes = [\"oxalis\"];\ndb.skeletons.save(elem);\n});", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24dfd4802906ef43ca5a" }, "revision" : 15, "hash" : "6c7c8dfd078baf20f9bcc86b6288186fe9a66b51", "applied_at" : 1460282591517, "db_up" : "db.skeletons.update({}, {\"$set\" : {\"editRotation\" : [0.0, 0.0, 0.0]}}, {\"multi\" : true})\ndb.volumes.update({}, {\"$set\" : {\"editRotation\" : [0.0, 0.0, 0.0]}}, {\"multi\" : true})", "db_down" : "db.skeletons.update({}, {\"$unset\" : {\"editRotation\" : \"\"}}, {\"multi\" : true})\ndb.volumes.update({}, {\"$unset\" : {\"editRotation\" : \"\"}}, {\"multi\" : true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24dfdac47625bd093e4d" }, "revision" : 14, "hash" : "9c387bbb8ab3e79c5bb3777430ef9810ed8b40ab", "applied_at" : 1460282591248, "db_up" : "db.taskTypes.update({}, {\"$set\" : {\"settings.advancedOptionsAllowed\" : true}, \"$push\" : {\"settings.allowedModes\" : \"orthogonal\"}}, {\"multi\" : true})\n\ndb.taskTypes.find().forEach(function(elem){\nelem.expectedTime.min = elem.expectedTime.min * 60;\nelem.expectedTime.max = elem.expectedTime.max * 60;\nelem.expectedTime.maxHard = elem.expectedTime.maxHard * 60;\n\ndb.taskTypes.save(elem);\n})\n\ndb.skeletons.update({}, {\"$set\" : {\"settings.advancedOptionsAllowed\" : true}, \"$push\" : {\"settings.allowedModes\" : \"orthogonal\"}}, {\"multi\" : true})\ndb.volumes.update({}, {\"$set\" : {\"settings.advancedOptionsAllowed\" : true}, \"$push\" : {\"settings.allowedModes\" : \"orthogonal\"}}, {\"multi\" : true})", "db_down" : "db.taskTypes.update({}, {\"$unset\" : {\"settings.advancedOptionsAllowed\" : \"\"}, \"$pull\" : {\"settings.allowedModes\" : \"orthogonal\"}}, {\"multi\" : true})\ndb.skeletons.update({}, {\"$unset\" : {\"settings.advancedOptionsAllowed\" : \"\"}, \"$pull\" : {\"settings.allowedModes\" : \"orthogonal\"}}, {\"multi\" : true})\ndb.volumes.update({}, {\"$unset\" : {\"settings.advancedOptionsAllowed\" : \"\"}, \"$pull\" : {\"settings.allowedModes\" : \"orthogonal\"}}, {\"multi\" : true})\n\ndb.taskTypes.find().forEach(function(elem){\nelem.expectedTime.min = elem.expectedTime.min / 60;\nelem.expectedTime.max = elem.expectedTime.max / 60;\nelem.expectedTime.maxHard = elem.expectedTime.maxHard / 60;\n\ndb.taskTypes.save(elem);\n})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24e035c04e5cf415f00d" }, "revision" : 19, "hash" : "1097bf910481b6c0447db363b153afd4fff3d962", "applied_at" : 1460282592624, "db_up" : "db.taskTypes.update({}, {$set: {\"isActive\": true}}, {multi: true})\ndb.tasks.update({}, {$set: {\"isActive\": true}}, {multi: true})\ndb.annotations.update({}, {$set: {\"isActive\": true}}, {multi: true})", "db_down" : "db.taskTypes.update({}, {$unset: {\"isActive\": 0}}, {multi: true})\ndb.tasks.update({}, {$unset: {\"isActive\": 0}}, {multi: true})\ndb.annotations.update({}, {$unset: {\"isActive\": 0}}, {multi: true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24e045145c8ca8008c85" }, "revision" : 18, "hash" : "283a76c9fe4c000b1a8f1f4918a96fc995ca54c9", "applied_at" : 1460282592353, "db_up" : "db.users.update({}, {$rename: {\"configuration.settings\": \"userConfiguration.configuration\"}}, {multi: true})\ndb.users.update({}, {$unset: {\"configuration\": 0, \"userConfiguration.configuration.brightnessContrastSettings\": 0, \"userConfiguration.configuration.fourBit\": 0, \"userConfiguration.configuration.quality\": 0, \"userConfiguration.configuration.interpolation\": 0}, $set: {dataSetConfigurations: {}}}, {multi: true})", "db_down" : "db.users.update({}, {$rename: {\"userConfiguration.configuration\": \"configuration.settings\"}}, {multi: true})\ndb.users.update({}, {$unset: {dataSetConfigurations: 0, userConfiguration: 0}, $set: {\"configuration.settings.brightnessContrastSettings\": {\"default\": {brightness: 0, contrast: 1}, \"st08x2\": {brightness: 0, contrast: 2.4}, \"07x2\": {brightness: 0, contrast: 2.4}, \"Cortex\": {brightness: 55, contrast: 1}}, \"configuration.settings.fourBit\": false, \"configuration.settings.quality\": 0, \"configuration.settings.interpolation\": false}}, {multi: true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24e04f56107f9b932eb6" }, "revision" : 20, "hash" : "e94bfd315672d84656eb9b5f78524dcce5b9264e", "applied_at" : 1460282592897, "db_up" : "db.tasks.update({}, {$set: {\"directLinks\": []}}, {multi: true})", "db_down" : "db.taskTypes.update({}, {$unset: {\"directLinks\": 1}}, {multi: true})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24e0ad543c46694fd2a7" }, "revision" : 17, "hash" : "e12f7c18d72edfeebb771de8831f2f781a435ec6", "applied_at" : 1460282592091, "db_up" : "db.tasks.find().forEach(function(elem){\nvar neededAssignments = elem.instances - elem.assignedInstances\nfor (i = 0; i < neededAssignments; i++) {\ndb.openAssignments.insert({\n\"_task\": elem._id,\n\"team\": elem.team,\n\"_project\": elem._project,\n\"neededExperience\": elem.neededExperience,\n\"priority\": elem.priority,\n\"created\": elem.created\n})\n}\n})", "db_down" : "db.tasks.find().forEach(function(elem){\ndb.tasks.update({\"_id\" : elem._id}, {\"$set\": {\"assignedInstances\" : elem.instances}})\n})\n\ndb.openAssignments.find().forEach(function(elem){\ndb.tasks.update({\"_id\" : elem._id}, {\"$inc\": {\"assignedInstances\" : -1} })\n})\n\ndb.openAssignments.remove({})", "state" : "applied", "last_problem" : "" }
{ "_id" : { "$oid" : "570a24e1841c4d3e5ff96c62" }, "revision" : 21, "hash" : "899fc14cef634dee9f8bc83d9405f9aa5569ec5b", "applied_at" : 1460282593179, "db_up" : "db.tasks.update({\"isActive\": {$exists: false}}, {$set: {\"isActive\": true}}, {multi: true})", "db_down" : "", "state" : "applied", "last_problem" : "" }
